heat_template_version: 2018-08-31 # rocky
description: Setup company of slurm VMs
parameters:
  def_image:
    type: string
    label: OS image
    description: image for VMs
    default: CentOS-Stream-8_20210210
  def_network:
    label: Network
    type: string
  def_subnet_mask:
    label: Subnet mask for compute
    description: Subnet mask for compute nodes
    type: string
    default: 10.8.1.0/24
  def_router:
    label: Router for subnet
    type: string
    description: Interface for compute nodes will be created on defined router
  def_master_node_subnet_ip:
    label: Fixed ip
    description: Fixed ip of master node in compute subnet
    type: string
    default: 10.8.1.10
  def_dns1_subnet:
    label: 1. DNS for compute subnet
    type: string
    default: 8.8.8.8
  def_dns2_subnet:
    label: 2. DNS for compute subnet
    type: string
    default: 8.8.4.4
  def_flavor:
    type: string
    label: Flavor of the compute nodes
    description: default flavor type
    default: normal
    constraints:
      - allowed_values: [ normal, large, xlarge, xlarge-mem, xlarge-mem128]
        description: normal, large, xlarge, xlarge-mem, xlarge-mem128
  slurm_controller_ssh_key:
    type: string
    label: Existing Key Name for controller 
    description: Name of key pair for accessing a controlles instance
  slurm_company_ssh_key_name:
    type: string
    label: Key Name for New Key Pair
    description: Please enter the name of new key pair for communication between nodes
  git_project_address:
    type: string
    label: Git project address
    default: https://github.com/jsw0011/slurm-openstack-devel-plugin.git
    description: Please enter the git url for slurm-openstack-devel-plugin or your own modified repository
  git_project_branch:
    type: string
    label: Git project branch
    default: master
    description: Please provide which branch to retrieve from repository
  enable_slurm_rest_api:
    type: string
    label: Enable Slurm REST API
    constraints:
      - allowed_values: [ "True", "False" ]
    default: "False"
  slurm_rest_api_port:
    type: number
    label: Slurm REST API port
    default: 6820
resources:
  slurm_company_ssh_key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      # replace tmstmp (feature to be implemented) with timestamp
      name: { get_param : slurm_company_ssh_key_name } 
  master_node:
    type: OS::Nova::Server
    properties:
      flavor: normal
      image: { get_param: def_image }
      key_name: { get_param : slurm_controller_ssh_key }
      user_data: { get_resource: boot_script }
      user_data_format: RAW
      metadata:
        ips:
          compute1: { get_attr: [compute1, first_address] }
          compute2: { get_attr: [compute2, first_address] } # user should add metadata ip
        #compute_ssh_key: { get_attr: [slurm_company_ssh_key, private_key] }
      networks:
        - 
          subnet:  { get_resource: compute_subnet }
          fixed_ip: { get_param: def_master_node_subnet_ip }
  # define wanted compute nodes by user
  compute1:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: def_flavor }
      image: { get_param: def_image }
      key_name: { get_resource : slurm_company_ssh_key }
      networks:
        - subnet:  { get_resource: compute_subnet }
  compute2:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: def_flavor }
      image: { get_param: def_image }
      key_name: { get_resource : slurm_company_ssh_key }
      networks:
        - subnet:  { get_resource: compute_subnet }
  # end - define wanted compute nodes by user

  compute_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_param: def_network }
      cidr: { get_param: def_subnet_mask } #"10.8.1.0/24"
      dns_nameservers: [{ get_param: def_dns1_subnet },{ get_param: def_dns2_subnet }]
      ip_version: 4
  compute_subnet_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_param: def_router }
      subnet: { get_resource: compute_subnet }
          
          
  # BOOT SCRIPT
  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: 
        str_replace: 
          params: 
            ssh_private_key_temp: 
              get_attr: [slurm_company_ssh_key, private_key]
            git_address: 
              get_param: git_project_address
            git_branch: 
              get_param: git_project_branch
            restapi_enabled:
              get_param: enable_slurm_rest_api
            slurm_restapi_port:
              get_param: slurm_rest_api_port
            __inner_net:
              get_attr: [compute_subnet, cidr]
            __fixed_ip:
              get_param: def_master_node_subnet_ip
          template: |
            #!/usr/bin/bash
            
            __INSTALL_DIR="/tmp/slurm-install"
            
            yum makecache
            yum install -y epel-release
            yum install -y jq git python3 cmake

            yum install -y ansible ansible-collection-community-general.noarch

            mkdir $__INSTALL_DIR
            meta_file="$__INSTALL_DIR/meta_data.json"
            curl http://169.254.169.254/openstack/latest/meta_data.json > $meta_file # download metadata

            slave_ips=`jq -r ".meta.ips" $meta_file | jq -r ". | to_entries[].value"`
            slave_names=`jq -r ".meta.ips" $meta_file | jq -r ". | to_entries[].key"`

            __MASTER_NAME=masterNode
    
            _MASTER_IP=__fixed_ip

            #repo with playbook and role for ansible
            __SLURM_REPO_DIR="$__INSTALL_DIR/slurm-openstack"
            mkdir $__SLURM_REPO_DIR
            git clone --depth 1 --branch "git_branch" "git_address" $__SLURM_REPO_DIR 
            
            __scripts_path=$__SLURM_REPO_DIR/openstack_init/scripts
            chmod +x $__scripts_path/*

            #set hosts
            hostnamectl set-hostname $__MASTER_NAME #sethostname in centos
            
            echo -e "$_MASTER_IP $__MASTER_NAME\n" | tee -a $__INSTALL_DIR/hosts
            __SLAVE_HOSTS=`python3 $__scripts_path/gen-hosts.py "$slave_ips" "$slave_names"`

            echo -e "$__SLAVE_HOSTS\n" | tee -a $__INSTALL_DIR/hosts

            cat $__INSTALL_DIR/hosts | tee -a /etc/hosts
            
            __PRIV_KEY_PATH=/root/slurm-company_priv_key
            touch $__PRIV_KEY_PATH && chmod 0400 $__PRIV_KEY_PATH
            echo -e "ssh_private_key_temp\n" | tee "$__PRIV_KEY_PATH" # private key for ssh connection with slurm company

            ____SLAVE_HOSTS_INVENTORY=`python3 $__scripts_path/gen-ansible-vars-vm-list.py "$slave_ips" "$slave_names"`
            cp $__SLURM_REPO_DIR/openstack_init/ansible/inventory_template.yml $__SLURM_REPO_DIR/openstack_init/ansible/inventory.yml

            __SLAVE_COUNT=`echo -e "$slave_names" | wc -l`
            echo -e "
            slurm_slaves:
              hosts:
                compute[1:$__SLAVE_COUNT]:
            " >> $__SLURM_REPO_DIR/openstack_init/ansible/inventory.yml
            echo -e "slurm_master_machines:
              -
                name: $__MASTER_NAME
                ip: $_MASTER_IP
            slurm_slaves_machines:
            $____SLAVE_HOSTS_INVENTORY
            ssh_compute_priv_key_file: /root/slurm-company_priv_key
            slurm_repo_dir: $__SLURM_REPO_DIR/openstack_init/
            slurm_install_folder: $__INSTALL_DIR
            slurm_openstack_files_path: $__SLURM_REPO_DIR/openstack_init/files
            slurm_openstack_services_path: $__SLURM_REPO_DIR/openstack_init/services
            slurm_openstack_templates_path: $__SLURM_REPO_DIR/openstack_init/templates
            slurm_openstack_scripts_path: $__scripts_path
            slurm_rest_api_enabled: restapi_enabled
            inner_net_mask: __inner_net
            slurm_rest_api_port: slurm_restapi_port" | tee -a $__SLURM_REPO_DIR/openstack_init/ansible/external_variables.yml

            # run ansible
            ansible-playbook -i $__SLURM_REPO_DIR/openstack_init/ansible/inventory.yml -e @$__SLURM_REPO_DIR/openstack_init/ansible/external_variables.yml $__SLURM_REPO_DIR/openstack_init/ansible/playbook.yml
outputs:
  slurm_company_priv_key:
    description: Private key
    value: { get_attr: [ slurm_company_ssh_key, private_key ] }
  ip_master:
    description: IP address of master node
    value: { get_attr: [master_node, first_address] }
  ip_compute1:
    description: IP address of compute node
    value: { get_attr: [compute1, first_address] }
  ip_compute2:
    description: IP address of compute node
    value: { get_attr: [compute2, first_address] }

# - name: update-machine
#   become: True
#   yum:
#     name: '*'
#     state: latest
- name: add master ip to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ slurm_master_machines[0].ip }}  masterNode"
  become: True

- name: install python
  become: true
  yum:
    name:
      - python3

- name: add user slurm
  become: True
  ansible.builtin.user:
    name: "{{ slurm_user }}"

- name: install shared NFS disk
  import_tasks: nfs.yml


- name: install munge dependencies
  become: True
  yum:
    name:
      - openssl
      - openssl-libs
      - openssl-devel
      - munge
      - rng-tools
      - munge-devel
      - perl
      #- firewalld
    state: latest
    enablerepo: powertools
- name: install slurm dependencies
  become: True
  yum:
    name:
      - pkgconf
      - make
      - git
      - gcc
      - pam-devel
      - numactl
      - numactl-devel
      - hwloc
      - lua
      - readline-devel
      - ncurses-devel
      - libibmad
      - libibumad
    state: latest
- name: store munge key
  become: True
  copy:
    mode: '0400'
    owner: munge
    dest: /etc/munge/munge.key
    content: "{{ munge_key }}"
- name: set owner to munge user directories
  become: True
  ansible.builtin.file:
    path: 
      - /etc/munge
      - /var/log/munge
      - /var/lib/munge
    owner: munge
    recurse: True
    mode: '0700'
- name: set owner to munge user of /run/munge
  become: True
  ansible.builtin.file:
    path: 
      - /run/munge
    owner: munge
    recurse: True
    mode: '0755'
- name: set access for munge key
  become: True
  ansible.builtin.file:
    path: /etc/munge/munge.key
    mode: '0400'
- name: stop munge service
  become: True
  ansible.builtin.systemd:
    name: munge
    state: stopped
- name: enable munge service
  become: True
  ansible.builtin.systemd:
    name: munge
    enabled: True
    masked: no
- name: start munge service
  become: True
  ansible.builtin.systemd:
    name: munge
    state: started

# - name: enable firewalld service
#   become: True
#   ansible.builtin.systemd:
#     name: firewalld
#     enabled: True
#     masked: no
# - name: start firewalld service
#   become: True
#   ansible.builtin.systemd:
#     name: firewalld
#     state: started
# - name: setup firewalld ports slurmd
#   become: True
#   ansible.builtin.firewalld:
#     port: "{{ item }}"
#     permanent: True
#     zone: public
#     state: enabled
#   loop:
#     - 6818/tcp
#     - 6818/udp
#     - 7321/tcp
#     - 7321/udp
# - name: reload service firewalld
#   become: True
#   ansible.builtin.systemd:
#     name: firewalld
#     state: reloaded

- name: clone slurm
  ansible.builtin.git:
   repo: "{{ slurm_git_repo }}"
   dest: "{{ slurm_install_folder }}/{{ slurm_git_repo_path }}"
   version: "{{ slurm_tag }}"
- name: configure installation
  command:
   cmd: ./configure --with-munge --disable-debug --enable-silent-rules
   chdir: "{{ slurm_install_folder }}/{{ slurm_git_repo_path }}"
- name: compile slurm
  community.general.make:
   chdir: "{{ slurm_install_folder }}/{{ slurm_git_repo_path }}"
   target: all
- name: check slurm compilation
  community.general.make:
   chdir: "{{ slurm_install_folder }}/{{ slurm_git_repo_path }}"
   target: check
- name: install compiled slurm
  become: True
  community.general.make:
    chdir: "{{ slurm_install_folder }}/{{ slurm_git_repo_path }}"
    target: install
- name: create /etc/slurm directory if not exists
  become: True
  ansible.builtin.file:
    path: /etc/slurm
    state: directory
    mode: '0755'

- name: set slurm configuration
  become: True
  copy:
    content: "{{ slurm_configuration }}\n"
    dest: /etc/slurm/slurm.conf
    owner: slurm
    mode: '0755'
- name: copy slurmd.service
  become: True
  ansible.builtin.copy:
    src: "{{ slurm_openstack_files_path }}/cgroup.conf"
    dest: /etc/slurm/cgroup.conf
    owner: slurm
    mode: '0755'
- name: create /var/spool/slurmd directory if not exists
  become: True
  ansible.builtin.file:
    path: /var/spool/slurmd
    state: directory
    mode: '0755'
    owner: slurm
    recurse: True
- name: touch and set owner to slurm user directories of /var/log/slurm_jobacct.log /var/log/slurm_jobcomp.log and /var/log/slurmd.log
  become: True
  ansible.builtin.file:
    state: touch
    path: "{{ item }}"
    owner: slurm
  loop:
    - /var/log/slurm_jobacct.log
    - /var/log/slurm_jobcomp.log
    - /var/log/slurmd.log
- name: copy slurmd.service
  become: True
  ansible.builtin.copy:
    src: "{{ slurm_openstack_services_path }}/slurmd.service"
    dest: /etc/systemd/system/slurmd.service
    owner: root
    mode: '0664'
- name: copy slurmd service script
  become: True
  ansible.builtin.copy:
    src: "{{ slurm_openstack_services_path }}/slurmd.sh"
    dest: /usr/bin/slurmd.sh
    owner: root
    mode: '0700'
- name: reset SElinux attributes
  become: True
  command: restorecon /usr/bin/slurmd.sh
- name: enable slurmd service
  become: True
  ansible.builtin.systemd:
    name: slurmd
    enabled: True
    masked: no
- name: set hostname
  become: True
  command: hostnamectl set-hostname "{{ inventory_hostname }}"
- name: start slurmd service
  become: True
  ansible.builtin.systemd:
    name: slurmd
    state: started
